#!/usr/bin/env python3
from sea_ice_rs.install import install

install()

import argparse
import pandas
import csv
from tqdm import tqdm
from sea_ice_rs.utils import decompose_filepath
from sea_ice_rs.data_processing import generate_GLCM, glcm_product


def main(args):
    parent_dir, filename, extension = decompose_filepath(args.input)
    if extension == "csv":  # Dataset file
        GLCM_dataset = open(f"{parent_dir}/{filename}_GLCM.csv", "w", newline="")
        GLCM_writer = csv.writer(GLCM_dataset)

        dataframe = pandas.read_csv(args.input, header=0)

        GLCM_writer.writerow(
            list(dataframe.columns)
            + [
                "entropy_8",
                "entropy_4",
                "entropy_3",
                "ASM_8",
                "ASM_4",
                "ASM_3",
                "contrast_8",
                "contrast_4",
                "contrast_3",
                "homogeneity_8",
                "homogeneity_4",
                "homogeneity_3",
                "dissimilarity_8",
                "dissimilarity_4",
                "dissimilarity_3",
            ]
        )

        grouped = dataframe.groupby(["patch_num", "year", "month", "day", "hour"])

        for name, group in tqdm(grouped):
            patch_num = int(name[0])
            year = int(name[1])
            month = str("{:0>2}".format(int(name[2])))
            day = str("{:0>2}".format(int(name[3])))
            hour = str("{:0>2}".format(int(name[4])))

            img_file = f"P{patch_num}-{year}{month}{day}{hour}.{args.img_extension}"

            data_points = [
                (int(item["coord_y"]), int(item["coord_x"]))
                for idx, item in group.iterrows()
            ]

            GLCM_matrices = generate_GLCM(f"{args.img_dir}/{img_file}", data_points)

            entropy = glcm_product(GLCM_matrices, "entropy", args.img_dir, img_file)
            ASM = glcm_product(GLCM_matrices, "ASM", args.img_dir, img_file)
            contrast = glcm_product(GLCM_matrices, "contrast", args.img_dir, img_file)
            homogeneity = glcm_product(
                GLCM_matrices, "homogeneity", args.img_dir, img_file
            )
            dissimilarity = glcm_product(
                GLCM_matrices, "dissimilarity", args.img_dir, img_file
            )

            i = 0
            for idx, item in group.iterrows():
                GLCM_features = (
                    [item[i] for i in range(len(item))]
                    + entropy[i, :].tolist()
                    + ASM[i, :].tolist()
                    + contrast[i, :].tolist()
                    + homogeneity[i, :].tolist()
                    + dissimilarity[i, :].tolist()
                )
                GLCM_writer.writerow(GLCM_features)
                i += 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--input", type=str, help="Input csv/image file")
    parser.add_argument("--img-dir", type=str, help="Directory with raw data")
    parser.add_argument(
        "--img-extension", type=str, help="extension of the raw images", default="jpg"
    )

    args = parser.parse_args()
    main(args)
