#!/usr/bin/env python3
from sea_ice_rs.install import install

install()

import argparse
import os
import cv2
import csv
import random
from tqdm import tqdm
from sea_ice_rs.utils import decompose_filepath


def main(args):
    with open(args.dist, "r") as dist_file:
        reader = csv.reader(dist_file)
        dist_stats = [row for row in reader]
        labels = dist_stats[0]
        counts = list(map(float, dist_stats[1]))

        null_idx = labels.index("")
        del labels[null_idx]
        del counts[null_idx]

        prob_dict = {
            int(labels[i]): min(counts) / counts[i] for i in range(len(labels))
        }
        selection_counts = {int(labels[i]): 0 for i in range(len(labels))}

    with open(f"{args.images}_pix_features.csv", "w", newline="") as file:
        writer = csv.writer(file)

        for img_f in tqdm(os.listdir(args.images)):
            _, filename, extension = decompose_filepath(img_f)
            if extension != "jpg":
                continue
            patch_num = filename.split("-")[0][1:]
            year = filename.split("-")[1][0:4]
            month = filename.split("-")[1][4:6]
            day = filename.split("-")[1][6:8]
            hour = filename.split("-")[1][8:10]

            inImage = cv2.imread(f"{args.images}/{img_f}")
            inMask = cv2.imread(f"{args.masks}/{filename}-mask.png")
            for row in range(inImage.shape[0]):
                for col in range(inImage.shape[1]):
                    label = inMask[row][col][0]
                    weights = [prob_dict[label], 1 - prob_dict[label]]
                    selection_bool = random.choices([True, False], weights, k=1)[0]
                    if selection_bool:
                        selection_counts[label] += 1
                        pix_vals = inImage[row][col]
                        writer.writerow(
                            [
                                patch_num,
                                year,
                                month,
                                day,
                                hour,
                                row,
                                col,
                                pix_vals[0],
                                pix_vals[1],
                                pix_vals[2],
                                label,
                            ]
                        )

    print(selection_counts)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--images", type=str, help="Images directory path")
    parser.add_argument("--masks", type=str, help="Masks directory path")
    parser.add_argument("--dist", type=str, help="Distribution statistics CSV file")

    args = parser.parse_args()
    main(args)
