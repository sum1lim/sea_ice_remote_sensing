#!/usr/bin/env python3
from sea_ice_rs.install import install

install()

import sys
import os
import shutil
import argparse
import numpy as np
from sea_ice_rs.utils import decompose_filepath
from sea_ice_rs.ML_tools import (
    config_parser,
    claculate_hidden_layer_size,
    process_data,
    learning_curve,
    construct_confusion_matrix,
)
from keras.models import Sequential
from keras.layers import Dense
from keras.utils import np_utils
from keras.layers.convolutional import Conv1D
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score


# def CNN():
# 	model = Sequential()
# 	model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_timesteps,n_features)))
# 	model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
# 	model.add(Dropout(0.5))
# 	model.add(MaxPooling1D(pool_size=2))
# 	model.add(Flatten())
# 	model.add(Dense(100, activation='relu'))
# 	model.add(Dense(n_outputs, activation='softmax'))
# 	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#     return model


def NN(hidden_layer_size, input_layer_size, output_layer_size):
    # Construct Neural Network
    model = Sequential()
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(output_layer_size, activation="softmax"))

    model.compile(
        loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"]
    )
    return model


def main(args):
    # Parse configuration
    num_epochs, hidden_size, verbosity, K = config_parser(args.data_config)

    # Set up results directory
    config_dir, filename, _ = decompose_filepath(args.data_config)
    result_dir = os.path.join(
        ".".join(config_dir.split("/")[:-1]), f"results/{filename}"
    )
    try:
        os.mkdir(result_dir)
    except FileExistsError:
        shutil.rmtree(result_dir)
        os.mkdir(result_dir)

    # Verbosity == 1 --> sys.stdout
    # Verbosity == 2 --> .log file
    if verbosity == 2:
        log_file = open(f"{result_dir}/{filename}.log", "w")
        sys.stdout = log_file

    # Modify train dataset
    X_tr, Y_tr, _ = process_data(args.train_data, args.data_config)

    # Define hidden layer size
    input_layer_size = X_tr.shape[1]
    output_layer_size = len(np.unique(Y_tr))
    hidden_layer_size = claculate_hidden_layer_size(
        input_layer_size, output_layer_size, hidden_size
    )

    # Stratified K-fold classification
    kfold = StratifiedKFold(n_splits=K, shuffle=False)
    for iter, (train, validation) in enumerate(kfold.split(X_tr, Y_tr)):

        # One-hot encoding of the label vector
        one_hot_Y_tr = np_utils.to_categorical(Y_tr[train])
        one_hot_Y_val = np_utils.to_categorical(Y_tr[validation])

        model = NN(hidden_layer_size, input_layer_size, output_layer_size)

        # Train the model
        model_summary = model.fit(
            x=X_tr[train],
            y=one_hot_Y_tr,
            epochs=num_epochs,
            batch_size=5,
            verbose=verbosity,
            validation_data=(X_tr[validation], one_hot_Y_val),
        )

        # Plot the learning curve
        learning_curve(model_summary.history, result_dir, iter)

    # Modify test dataset
    X_te, Y_te, classes = process_data(args.test_data, args.data_config)

    # Predict the test dataset
    y_pred = np.argmax(model.predict(x=X_te, batch_size=5, verbose=verbosity), axis=1)
    print(f"Test accuracy: {accuracy_score(Y_te, y_pred)}", file=sys.stdout)

    # Construct confusion matrix
    construct_confusion_matrix(classes, Y_te, y_pred, result_dir)

    # stdout redirection closed
    if verbosity == 2:
        log_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--train-data", type=str, help="CSV file containing train data")
    parser.add_argument("--test-data", type=str, help="CSV file containing test data")
    parser.add_argument(
        "--data-config",
        type=str,
        help="YAML file containing the configuration for label/feature modification",
    )

    args = parser.parse_args()
    main(args)
