#!/usr/bin/env python3
import argparse
import os
from multiprocessing import Process
from sea_ice_rs.utils import decompose_filepath
from sea_ice_rs.data_processing import (
    sampling,
    sampling_probability,
    patch_location_map,
)


def main(args):
    # Create dataset CSV files
    parent_dir = decompose_filepath(decompose_filepath(args.images)[0])[0]

    try:
        os.mkdir(f"{parent_dir}/train_dataset")
    except FileExistsError:
        None

    try:
        os.mkdir(f"{parent_dir}/test_dataset")
    except FileExistsError:
        None

    # Obtain XY corrdinates of patches
    patch_locs = patch_location_map(args.patch_loc)

    # Directory paths for images and masks
    img_dir = args.images
    mask_dir = args.masks

    # Split the set of images for train and test data sampling
    images = sorted(os.listdir(args.images))
    split_threshold = int(len(images) * 0.8)
    tr_images = images[:split_threshold]
    te_images = images[split_threshold:]

    # Generate probabilities to select samples depending on their class
    tr_prob_dict = sampling_probability(args.masks, tr_images)
    te_prob_dict = sampling_probability(args.masks, te_images)

    # Output CSV dataset filepaths
    tr_file = f"{parent_dir}/train_dataset/raw.csv"
    te_file = f"{parent_dir}/test_dataset/raw.csv"

    # Arguments for processes
    tr_args = [tr_images, tr_file, img_dir, mask_dir, tr_prob_dict, patch_locs, "Train"]
    te_args = [te_images, te_file, img_dir, mask_dir, te_prob_dict, patch_locs, "Test"]

    if args.multiprocess:
        processes = list()

        p_tr = Process(target=sampling, args=tr_args)
        p_tr.start()
        processes.append(p_tr)

        p_te = Process(target=sampling, args=te_args)
        p_te.start()
        processes.append(p_te)

        for p in processes:
            p.join()

    else:
        sampling(*tr_args)

        sampling(*te_args)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--images", type=str, help="Images directory path")
    parser.add_argument("--masks", type=str, help="Masks directory path")
    parser.add_argument("--dist", type=str, help="Distribution statistics CSV file")
    parser.add_argument(
        "--patch-loc", type=str, help="Patch locations ((X, Y) coordinates) CSV file"
    )
    parser.add_argument("--multiprocess", action="store_true", help="Multiprocessing")

    args = parser.parse_args()
    main(args)
