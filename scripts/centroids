#!/usr/bin/env python3
from sea_ice_rs.install import install

install()

import argparse
import sys
import cv2
import numpy as np
from skimage import measure
from sea_ice_rs.utils import (
    output_to_window,
)


def main(args):
    try:
        img = cv2.imread(args.input)
    except:
        print("The file does not exist", file=sys.stderr)
        exit(1)

    labels = measure.label(255 - img[:, :, 0])

    props = measure.regionprops(labels)
    patches = [p for p in props if p.area <= args.max_area]

    # locations of the centroids
    centroid_locs = np.array([prop.centroid for i, prop in enumerate(patches)])

    # create an image of the centroids
    height, width, _ = img.shape
    centroids_img = 255 * np.ones([height, width], dtype=np.uint8)

    for loc in centroid_locs:
        row = round(loc[0])
        col = round(loc[1])
        centroids_img[row][col] = 0

    for i in centroid_locs:
        print(i)

    output_to_window("centroids", centroids_img)

    return centroids_img, centroid_locs


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--input", type=str, help="Input binary image file")
    parser.add_argument(
        "--max-area", type=int, help="Maximum number of pixels in a patch"
    )
    parser.add_argument(
        "--extension",
        type=str,
        help="Output file extension(e.g. png, jpg, tiff)",
        choices=["png", "jpg", "tiff"],
    )

    args = parser.parse_args()
    main(args)
