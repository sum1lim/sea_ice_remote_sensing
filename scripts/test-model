#!/usr/bin/env python3
import argparse
import sys
import numpy as np
from sea_ice_rs.ML_tools import (
    config_parser,
    claculate_hidden_layer_size,
    process_data,
    construct_confusion_matrix,
    NN,
    CNN,
)
from sklearn.metrics import accuracy_score


def main(args):
    model_type = args.result_dir.split("/")[-1].split("_")[0]

    # Parse configuration
    _, hidden_size, verbosity, K, kernel_size = config_parser(args.dl_config)

    # Verbosity == 1 --> sys.stdout
    # Verbosity == 2 --> .log file
    if verbosity == 2:
        log_file = open(f"{args.result_dir}/test.log", "w")
        sys.stdout = log_file

    # Modify test dataset
    X_te, Y_te, classes = process_data(args.test_data, args.dl_config)

    # Define hidden layer size
    input_layer_size = X_te.shape[1]
    output_layer_size = len(np.unique(Y_te))
    hidden_layer_size = claculate_hidden_layer_size(
        input_layer_size, output_layer_size, hidden_size
    )

    # Initiate model
    if model_type == "NN":
        model = NN(hidden_layer_size, input_layer_size, output_layer_size)
    elif model_type == "CNN":
        model = CNN(hidden_layer_size, input_layer_size, output_layer_size, kernel_size)
        # X should be formatted for CNN
        X_te = np.transpose(np.array([np.transpose(X_te)]))

    # Call checkpoint
    checkpoint_path = f"{args.result_dir}/cp.ckpt"
    model.load_weights(checkpoint_path)

    # Predict the test dataset
    y_pred = np.argmax(model.predict(x=X_te, batch_size=5, verbose=verbosity), axis=1)
    print(f"Test accuracy: {accuracy_score(Y_te, y_pred)}", file=sys.stdout)

    # Construct confusion matrix
    construct_confusion_matrix(classes, Y_te, y_pred, args.result_dir)

    # stdout redirection closed
    if verbosity == 2:
        log_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--test-data", type=str, help="CSV file containing test data")
    parser.add_argument(
        "--result-dir",
        type=str,
        help="Directory path with train results including checkpoint files",
    )
    parser.add_argument(
        "--dl-config",
        type=str,
        help="YAML file containing the configuration for deep learning",
    )

    args = parser.parse_args()
    main(args)
