#!/usr/bin/env python3
import argparse
import sys
import numpy as np
from sea_ice_rs.ML_tools import (
    config_parser,
    process_data,
    construct_confusion_matrix,
)
from sklearn.metrics import accuracy_score
from keras.models import load_model


def main(args):
    model_type = args.result_dir.split("/")[-1].split("_")[0]

    # Parse configuration
    _, test_data, _, _, verbosity, K, kernel_size = config_parser(args.dl_config)

    # Verbosity == 1 --> sys.stdout
    # Verbosity == 2 --> .log file
    if verbosity == 2:
        log_file = open(f"{args.result_dir}/test.log", "w")
        sys.stdout = log_file

    # Modify test dataset
    X_te, Y_te, classes = process_data(test_data, args.dl_config)

    # Format X if CNN
    # Pad first few features at the end for convolution
    if model_type == "CNN":
        X_te_conv = np.transpose(
            [
                np.transpose(
                    np.pad(
                        X_te[0 : X_te.shape[0], X_te.shape[1] - 18 : X_te.shape[1]],
                        ((0, 0), (0, kernel_size)),
                        "wrap",
                    )
                )
            ]
        )
        # Test dataset for dense layer to concatenate after convolution
        X_te_cat = X_te[0 : X_te.shape[0], 0 : X_te.shape[1] - 15]

        X_te = {"conv": X_te_conv, "cat": X_te_cat}

    for k in range(K):
        print(
            f"*************************** Fold #: {k} ***************************",
            file=sys.stdout,
        )
        # Call checkpoint
        checkpoint_path = f"{args.result_dir}/ckpt_{k+1}"
        trained_model = load_model(checkpoint_path)

        # Predict the test dataset
        y_pred = np.argmax(
            trained_model.predict(x=X_te, batch_size=1000, verbose=verbosity), axis=1
        )
        print(f"Test accuracy: {accuracy_score(Y_te, y_pred)}", file=sys.stdout)

        # Construct confusion matrix
        construct_confusion_matrix(classes, Y_te, y_pred, args.result_dir, k)

    # stdout redirection closed
    if verbosity == 2:
        log_file.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--result-dir",
        type=str,
        help="Directory path with train results including checkpoint files",
    )
    parser.add_argument(
        "--dl-config",
        type=str,
        help="YAML file containing the configuration for deep learning",
    )

    args = parser.parse_args()
    main(args)
