#!/usr/bin/env python3
from sea_ice_rs.install import install

install()

import argparse
import os
import sys
import cv2
import numpy as np
from skimage import filters
from tqdm import tqdm
from sea_ice_rs.utils import output_to_window, mkdir_output, output
from sea_ice_rs.contrast import contrast


def main(args):
    if os.path.isfile(args.input):  # Only one input image is provided
        inImage = cv2.imread(args.input)
        filtered = filters.sobel(inImage)
        if args.contrast:  # enhances contrast of the output image
            filtered = contrast(filtered).astype(np.uint8)

        output_name = args.input.split("/")[-1].split(".")[0] + "_SOBEL"
        for i in range(
            filtered.shape[2]
        ):  # for loop deals with multiple bands in the image
            output_to_window(f"{output_name}(band {i})", filtered[:, :, i])

        if args.extension:  # save to an output file if extension is given
            outExtension = "." + args.extension
            outputFile = ".".join(args.input.split(".")[:-1]) + "_SOBEL" + outExtension

            output(outputFile, filtered, split_rgb=True)

    elif os.path.isdir(args.input):  # A collection of input images
        for img_f in tqdm(os.listdir(args.input)):
            file_path = f"{args.input}/{img_f}"
            try:  # Valid image file
                inImage = cv2.imread(file_path)
                filtered = filters.sobel(inImage)
                if args.contrast:  # enhances contrast of the output image
                    filtered = contrast(filtered).astype(np.uint8)

                if args.extension:  # save to an output file if extension is given
                    mkdir_output(
                        file_path, "SOBEL", args.extension, filtered, split_rgb=True
                    )  # split_rgb option saves an image per band

            except:  # non-image file
                print(f"Error occurred when processing {img_f}")

    else:
        sys.exit(f"Provided input does not exist")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--input", type=str, help="Input file/directoy path")
    parser.add_argument("--contrast", action="store_true", help="Enhannces contrast")
    parser.add_argument(
        "--extension",
        type=str,
        help="Output file extension(e.g. png, jpg, tiff)",
        choices=["png", "jpg", "tiff"],
    )

    args = parser.parse_args()
    main(args)
